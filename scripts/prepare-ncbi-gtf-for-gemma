#!/usr/bin/env python

# This script renames gene_id with the NCBI numerical gene ID

import argparse
import re
import gzip
import urllib.request

gene_id_pattern = re.compile('gene_id "(.*?)"')
transcript_id_pattern = re.compile('transcript_id "(.*?)"')
dbxref_ncbi_gene_id_pattern = re.compile('db_xref "GeneID:(.*?)"')

parser = argparse.ArgumentParser()
parser.add_argument('--gtf', required=True)
parser.add_argument('--output-gtf', required=True)
parser.add_argument('--output-gene-ids', required=True)
args = parser.parse_args()

converted_lines = 0
seen_gene_ids = set()
ncbi_id_by_gene_id = {}
with gzip.open(args.gtf, 'rt') as f, open(args.output_gtf, 'w') as fout:
    for lineno, line in enumerate(f):
        gene_id = gene_id_pattern.findall(line)
        transcript_id = transcript_id_pattern.findall(line)
        ncbi_id = dbxref_ncbi_gene_id_pattern.findall(line)
        if gene_id:
            gene_id = gene_id[0]
            if ncbi_id:
                ncbi_id = int(ncbi_id[0])
                ncbi_id_by_gene_id[gene_id] = ncbi_id
            else:
                print(f'The following line [{lineno}] does not have a GeneID db_xref record, retrieving it from a previously seen record:')
                print(line)
                ncbi_id = ncbi_id_by_gene_id[gene_id]
            if transcript_id and transcript_id[0] != '':
                seen_gene_ids.add(ncbi_id)
            line = gene_id_pattern.sub(f'gene_id "{ncbi_id}"', line, count=1)
            converted_lines += 1
        fout.write(line)

with open(args.output_gene_ids, 'w') as f:
    f.write('\n'.join(map(str, sorted(seen_gene_ids))) + '\n')
