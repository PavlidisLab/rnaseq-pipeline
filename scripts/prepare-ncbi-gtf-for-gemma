#!/usr/bin/env python

# This script renames gene_id with the NCBI numerical gene ID

import argparse
import re
import gzip
import urllib.request

gene_id_pattern = re.compile('gene_id "(.+?)"')
transcript_id_pattern = re.compile('transcript_id "(.+?)"')
dbxref_ncbi_gene_id_pattern = re.compile('db_xref "GeneID:(.+?)"')

parser = argparse.ArgumentParser()
parser.add_argument('--gtf', required=True)
parser.add_argument('--output-gtf', required=True)
parser.add_argument('--output-gene-ids', required=True)
args = parser.parse_args()

converted_lines = 0
seen_gene_ids = set()
unknown_symbols = set()
with gzip.open(args.gtf, 'rt') as f, open(args.output_gtf, 'w') as fout:
    for line in f:
        gene_id = gene_id_pattern.findall(line)
        transcript_id = transcript_id_pattern.findall(line)
        ncbi_id = dbxref_ncbi_gene_id_pattern.findall(line)
        if gene_id:
            if ncbi_id:
                new_gene_id = int(ncbi_id[0])
                seen_gene_ids.add(new_gene_id)
                line = gene_id_pattern.sub(f'gene_id "{new_gene_id}"', line, count=1)
                converted_lines += 1
            else:
                unknown_gene_id = gene_id[0]
                if transcript_id:
                    unknown_gene_id += ':' + transcript_id[0]
                unknown_symbols.add(unknown_gene_id)
                continue # ignore line
        fout.write(line)

with open(args.output_gene_ids, 'w') as f:
    f.write('\n'.join(map(str, sorted(seen_gene_ids))))

print(f'{converted_lines} lines were converted and {len(unknown_symbols)} symbols were unmatched to NCBI gene IDs: ' + ', '.join(sorted(unknown_symbols)))
